//! HTML generation module

use crate::data::Schema;
use serde::{Deserialize, Serialize};

#[derive(Debug, thiserror::Error)]
pub enum HtmlError {
    #[error("HTML generation error: {0}")]
    GenerationError(String),
    
    #[error("Template error: {0}")]
    TemplateError(String),
    
    #[error("Data encoding error: {0}")]
    EncodingError(String),
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct HtmlConfig {
    pub title: String,
    pub theme: String,
    pub chart_config: crate::ChartConfig,
    pub include_hyparquet: bool,
}

pub struct HtmlGenerator {
    title: String,
    theme: String,
}

impl HtmlGenerator {
    pub fn new(config: &HtmlConfig) -> Self {
        Self {
            title: config.title.clone(),
            theme: config.theme.clone(),
        }
    }
    
    pub async fn generate_html(&self, parquet_bytes: &[u8], schema: &Schema) -> Result<String, HtmlError> {
        let base64_data = base64::Engine::encode(&base64::engine::general_purpose::STANDARD, parquet_bytes);
        
        // Calculate grid layout based on number of columns
        let num_columns = schema.columns.len();
        let grid_columns = match num_columns {
            1 => "1fr",
            2 => "1fr 1fr", 
            3 => "1fr 1fr 1fr",
            4 => "1fr 1fr 1fr 1fr",
            5..=6 => "repeat(3, 1fr)",
            _ => "repeat(auto-fit, minmax(300px, 1fr))",
        };
        
        // Generate column-specific chart HTML
        let mut chart_html = String::new();
        
        for (_i, column) in schema.columns.iter().enumerate() {
            // Create descriptive canvas ID based on column name (like original data_explorer.html)
            let canvas_id = format!("{}Canvas", column.name.replace(" ", "").replace("_", ""));
            let panel_class = match column.data_type {
                crate::data::DataType::Float | crate::data::DataType::Integer => "histogram-panel",
                crate::data::DataType::Categorical(_) => "category-panel",
                crate::data::DataType::Boolean => "boolean-panel",
                _ => "text-panel",
            };
            
            chart_html.push_str(&format!(r#"
        <div class="panel {}">
            <div class="panel-title">{}</div>
            <canvas id="{}" width="400" height="300"></canvas>
        </div>"#, 
                panel_class, column.name, canvas_id
            ));
        }
        
        // Build HTML using string concatenation
        let mut html = String::new();
        html.push_str("<!DOCTYPE html>\n");
        html.push_str("<html lang=\"en\">\n");
        html.push_str("<head>\n");
        html.push_str("    <meta charset=\"UTF-8\">\n");
        html.push_str("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
        html.push_str(&format!("    <title>{} - Data Explorer</title>\n", self.title));
        html.push_str("    <style>\n");
        html.push_str("        * { margin: 0; padding: 0; box-sizing: border-box; }\n");
        html.push_str("        body { font-family: -apple-system, sans-serif; background: #0a0a0a; color: #e0e0e0; overflow: hidden; }\n");
        html.push_str("        #loading { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; }\n");
        html.push_str("        .progress { width: 400px; height: 6px; background: #333; margin-top: 10px; border-radius: 3px; }\n");
        html.push_str("        .progress-bar { height: 100%; background: #4a9eff; transition: width 0.1s; border-radius: 3px; }\n");
        html.push_str("        #main { display: none; height: 100vh; padding: 8px; }\n");
        html.push_str("        .header { background: #1a1a1a; padding: 8px 16px; border-radius: 4px; display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }\n");
        html.push_str("        .stats { display: flex; gap: 15px; font-size: 13px; }\n");
        html.push_str("        .stats span { display: flex; align-items: center; gap: 5px; }\n");
        html.push_str("        .stats strong { color: #4a9eff; }\n");
        html.push_str("        button { background: #4a9eff; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer; font-size: 12px; transition: all 0.2s; }\n");
        html.push_str("        button:hover { background: #3a8eef; }\n");
        html.push_str("        button:active { transform: scale(0.95); }\n");
        html.push_str(&format!("        .grid {{ display: grid; grid-template-columns: {}; gap: 8px; height: calc(100% - 60px); }}\n", grid_columns));
        html.push_str("        .panel { background: #1a1a1a; border-radius: 4px; padding: 8px; position: relative; min-height: 200px; display: flex; flex-direction: column; }\n");
        html.push_str("        .panel-title { font-size: 13px; margin-bottom: 8px; font-weight: 500; }\n");
        html.push_str("        canvas { width: 100%; height: calc(100% - 30px); cursor: crosshair; }\n");
        html.push_str("        #tooltip { position: fixed; background: rgba(0,0,0,0.95); padding: 6px 10px; border-radius: 3px; font-size: 11px; pointer-events: none; display: none; z-index: 1000; border: 1px solid #333; }\n");
        html.push_str("        .histogram-panel { border-left: 3px solid #4a9eff; }\n");
        html.push_str("        .category-panel { border-left: 3px solid #ff6b6b; }\n");
        html.push_str("        .boolean-panel { border-left: 3px solid #51cf66; }\n");
        html.push_str("        .text-panel { border-left: 3px solid #ffd43b; }\n");
        html.push_str("    </style>\n");
        html.push_str("</head>\n");
        html.push_str("<body>\n");
        html.push_str("    <div id=\"loading\">\n");
        html.push_str("        <div>Loading data...</div>\n");
        html.push_str("        <div class=\"progress\"><div class=\"progress-bar\" id=\"progress\"></div></div>\n");
        html.push_str("        <div id=\"loadingStatus\" style=\"margin-top: 8px; font-size: 12px; color: #999;\"></div>\n");
        html.push_str("    </div>\n");
        html.push_str("    \n");
        html.push_str("    <div id=\"main\">\n");
        html.push_str("        <div class=\"header\">\n");
        html.push_str(&format!("            <h3>Data Explorer - {} Rows</h3>\n", schema.row_count));
        html.push_str("            <div class=\"stats\">\n");
        html.push_str(&format!("                <span>Total: <strong>{}</strong></span>\n", schema.row_count));
        html.push_str(&format!("                <span>Columns: <strong>{}</strong></span>\n", schema.columns.len()));
        html.push_str(&format!("                <span>Data Size: <strong>{:.1} KB</strong></span>\n", parquet_bytes.len() as f64 / 1024.0));
        html.push_str("            </div>\n");
        html.push_str("            <div style=\"display: flex; gap: 8px;\">\n");
        html.push_str("                <button onclick=\"resetAll()\">ðŸ”„ Reset</button>\n");
        html.push_str("                <button onclick=\"exportData()\">ðŸ’¾ Export</button>\n");
        html.push_str("            </div>\n");
        html.push_str("        </div>\n");
        html.push_str("        \n");
        html.push_str("        <div class=\"grid\">\n");
        html.push_str(&chart_html);
        html.push_str("        </div>\n");
        html.push_str("    </div>\n");
        html.push_str("    \n");
        html.push_str("    <div id=\"tooltip\"></div>\n");
        html.push_str("    \n");
        html.push_str("    <script>\n");
        html.push_str("        // Embedded data\n");
        html.push_str(&format!("        const embeddedData = \"{}\";\n", base64_data));
        html.push_str(&format!("        const schema = {};\n", serde_json::to_string(schema).unwrap_or_else(|_| "{}".to_string())));
        html.push_str("        let allData = null;\n");
        html.push_str("        let charts = {};\n");
        html.push_str("        let filters = {};\n");
        html.push_str("        let filteredIndices = [];\n");
        html.push_str("        \n");
        html.push_str("        // Initialize data\n");
        html.push_str("        async function initializeData() {\n");
        html.push_str("            try {\n");
        html.push_str("                // Decode base64 data\n");
        html.push_str("                const binaryString = atob(embeddedData);\n");
        html.push_str("                const bytes = new Uint8Array(binaryString.length);\n");
        html.push_str("                for (let i = 0; i < binaryString.length; i++) {\n");
        html.push_str("                    bytes[i] = binaryString.charCodeAt(i);\n");
        html.push_str("                }\n");
        html.push_str("                \n");
        html.push_str("                // Parse JSON data (temporary - will be replaced with hyparquet)\n");
        html.push_str("                const jsonString = new TextDecoder().decode(bytes);\n");
        html.push_str("                allData = JSON.parse(jsonString);\n");
        html.push_str("                \n");
        html.push_str("                // Update progress\n");
        html.push_str("                document.getElementById('progress').style.width = '100%';\n");
        html.push_str("                document.getElementById('loadingStatus').textContent = 'Data loaded successfully!';\n");
        html.push_str("                \n");
        html.push_str("                // Show main interface\n");
        html.push_str("                setTimeout(() => {\n");
        html.push_str("                    document.getElementById('loading').style.display = 'none';\n");
        html.push_str("                    document.getElementById('main').style.display = 'block';\n");
        html.push_str("                    initializeCharts();\n");
        html.push_str("                }, 500);\n");
        html.push_str("                \n");
        html.push_str("            } catch (error) {\n");
        html.push_str("                console.error('Error loading data:', error);\n");
        html.push_str("                document.getElementById('loadingStatus').textContent = 'Error loading data: ' + error.message;\n");
        html.push_str("            }\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Chart base class - matches original data_explorer.html\n");
        html.push_str("        class Chart {\n");
        html.push_str("            constructor(canvasId) {\n");
        html.push_str("                this.canvas = document.getElementById(canvasId);\n");
        html.push_str("                this.ctx = this.canvas.getContext('2d', { alpha: false });\n");
        html.push_str("                this.isDragging = false;\n");
        html.push_str("                this.selection = null;\n");
        html.push_str("                \n");
        html.push_str("                // Bind handlers so we can remove them on destroy\n");
        html.push_str("                this._onResize = this.resize.bind(this);\n");
        html.push_str("                this._handleMouseDown = e => this.onMouseDown(e);\n");
        html.push_str("                this._handleMouseMove = e => this.onMouseMove(e);\n");
        html.push_str("                this._handleMouseUp = e => this.onMouseUp(e);\n");
        html.push_str("                this._handleMouseLeave = e => { this.onMouseUp(e); document.getElementById('tooltip').style.display = 'none'; };\n");
        html.push_str("                this._handleClick = e => this.onClick(e);\n");
        html.push_str("\n");
        html.push_str("                this.resize();\n");
        html.push_str("                window.addEventListener('resize', this._onResize);\n");
        html.push_str("                \n");
        html.push_str("                this.canvas.addEventListener('mousedown', this._handleMouseDown);\n");
        html.push_str("                this.canvas.addEventListener('mousemove', this._handleMouseMove);\n");
        html.push_str("                this.canvas.addEventListener('mouseup', this._handleMouseUp);\n");
        html.push_str("                this.canvas.addEventListener('mouseleave', this._handleMouseLeave);\n");
        html.push_str("                this.canvas.addEventListener('click', this._handleClick);\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            resize() {\n");
        html.push_str("                const rect = this.canvas.parentElement.getBoundingClientRect();\n");
        html.push_str("                const dpr = window.devicePixelRatio || 1;\n");
        html.push_str("                this.canvas.width = (rect.width - 16) * dpr;\n");
        html.push_str("                this.canvas.height = (rect.height - 36) * dpr;\n");
        html.push_str("                this.canvas.style.width = (rect.width - 16) + 'px';\n");
        html.push_str("                this.canvas.style.height = (rect.height - 36) + 'px';\n");
        html.push_str("                this.ctx.scale(dpr, dpr);\n");
        html.push_str("                this.width = this.canvas.width / dpr;\n");
        html.push_str("                this.height = this.canvas.height / dpr;\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            clear() {\n");
        html.push_str("                this.ctx.clearRect(0, 0, this.width, this.height);\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            onMouseDown(e) {\n");
        html.push_str("                this.isDragging = true;\n");
        html.push_str("                const rect = this.canvas.getBoundingClientRect();\n");
        html.push_str("                this.startX = e.clientX - rect.left;\n");
        html.push_str("                this.startY = e.clientY - rect.top;\n");
        html.push_str("                this.selection = null;\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            onMouseMove(e) {\n");
        html.push_str("                if (!this.isDragging) return;\n");
        html.push_str("                const rect = this.canvas.getBoundingClientRect();\n");
        html.push_str("                this.currentX = e.clientX - rect.left;\n");
        html.push_str("                this.currentY = e.clientY - rect.top;\n");
        html.push_str("                \n");
        html.push_str("                // Update selection rectangle\n");
        html.push_str("                this.selection = {\n");
        html.push_str("                    startX: Math.min(this.startX, this.currentX),\n");
        html.push_str("                    startY: Math.min(this.startY, this.currentY),\n");
        html.push_str("                    endX: Math.max(this.startX, this.currentX),\n");
        html.push_str("                    endY: Math.max(this.startY, this.currentY)\n");
        html.push_str("                };\n");
        html.push_str("                \n");
        html.push_str("                this.draw();\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            onMouseUp(e) {\n");
        html.push_str("                if (!this.isDragging) return;\n");
        html.push_str("                this.isDragging = false;\n");
        html.push_str("                \n");
        html.push_str("                // Apply selection if it's large enough\n");
        html.push_str("                if (this.selection && this.selection.endX - this.selection.startX > 5) {\n");
        html.push_str("                    this.applySelection(this.selection);\n");
        html.push_str("                }\n");
        html.push_str("                \n");
        html.push_str("                this.selection = null;\n");
        html.push_str("                this.draw();\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            onClick(e) {\n");
        html.push_str("                // Override in subclasses\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            applySelection(selection) {\n");
        html.push_str("                // Override in subclasses\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            destroy() {\n");
        html.push_str("                window.removeEventListener('resize', this._onResize);\n");
        html.push_str("                this.canvas.removeEventListener('mousedown', this._handleMouseDown);\n");
        html.push_str("                this.canvas.removeEventListener('mousemove', this._handleMouseMove);\n");
        html.push_str("                this.canvas.removeEventListener('mouseup', this._handleMouseUp);\n");
        html.push_str("                this.canvas.removeEventListener('mouseleave', this._handleMouseLeave);\n");
        html.push_str("                this.canvas.removeEventListener('click', this._handleClick);\n");
        html.push_str("            }\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Histogram chart class - matches original\n");
        html.push_str("        class Histogram extends Chart {\n");
        html.push_str("            constructor(canvasId, data, label, formatter) {\n");
        html.push_str("                super(canvasId);\n");
        html.push_str("                this.data = data;\n");
        html.push_str("                this.label = label;\n");
        html.push_str("                this.formatter = formatter || (v => v.toString());\n");
        html.push_str("                this.margin = { top: 10, right: 10, bottom: 40, left: 50 };\n");
        html.push_str("                this.isInteracting = false;\n");
        html.push_str("                this._drawScheduled = false;\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            getFilterKey() {\n");
        html.push_str("                return this.label.toLowerCase();\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            applySelection(selection) {\n");
        html.push_str("                // Convert selection to data range\n");
        html.push_str("                const width = this.width - this.margin.left - this.margin.right;\n");
        html.push_str("                const height = this.height - this.margin.top - this.margin.bottom;\n");
        html.push_str("                \n");
        html.push_str("                const min = Math.min(...this.data);\n");
        html.push_str("                const max = Math.max(...this.data);\n");
        html.push_str("                const binCount = Math.min(20, Math.ceil(Math.sqrt(this.data.length)));\n");
        html.push_str("                const binSize = (max - min) / binCount;\n");
        html.push_str("                \n");
        html.push_str("                const startBin = Math.floor((selection.startX - this.margin.left) / (width / binCount));\n");
        html.push_str("                const endBin = Math.floor((selection.endX - this.margin.left) / (width / binCount));\n");
        html.push_str("                \n");
        html.push_str("                const dataMin = min + startBin * binSize;\n");
        html.push_str("                const dataMax = min + (endBin + 1) * binSize;\n");
        html.push_str("                \n");
        html.push_str("                // Apply filter\n");
        html.push_str("                filters[this.getFilterKey()] = [dataMin, dataMax];\n");
        html.push_str("                applyFilters();\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            draw() {\n");
        html.push_str("                if (this._drawScheduled) return;\n");
        html.push_str("                this._drawScheduled = true;\n");
        html.push_str("                requestAnimationFrame(() => {\n");
        html.push_str("                    this._drawScheduled = false;\n");
        html.push_str("                    this._draw();\n");
        html.push_str("                });\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            _draw() {\n");
        html.push_str("                this.clear();\n");
        html.push_str("                \n");
        html.push_str("                const width = this.width - this.margin.left - this.margin.right;\n");
        html.push_str("                const height = this.height - this.margin.top - this.margin.bottom;\n");
        html.push_str("                \n");
        html.push_str("                // Create bins\n");
        html.push_str("                const min = Math.min(...this.data);\n");
        html.push_str("                const max = Math.max(...this.data);\n");
        html.push_str("                const binCount = Math.min(20, Math.ceil(Math.sqrt(this.data.length)));\n");
        html.push_str("                const binSize = (max - min) / binCount;\n");
        html.push_str("                const bins = new Array(binCount).fill(0);\n");
        html.push_str("                \n");
        html.push_str("                this.data.forEach(value => {\n");
        html.push_str("                    const binIndex = Math.min(Math.floor((value - min) / binSize), binCount - 1);\n");
        html.push_str("                    bins[binIndex]++;\n");
        html.push_str("                });\n");
        html.push_str("                \n");
        html.push_str("                const maxCount = Math.max(...bins);\n");
        html.push_str("                const barWidth = width / binCount;\n");
        html.push_str("                \n");
        html.push_str("                // Draw bars\n");
        html.push_str("                this.ctx.fillStyle = '#4a9eff';\n");
        html.push_str("                bins.forEach((count, i) => {\n");
        html.push_str("                    const barHeight = (count / maxCount) * height;\n");
        html.push_str("                    const x = this.margin.left + i * barWidth;\n");
        html.push_str("                    const y = this.margin.top + height - barHeight;\n");
        html.push_str("                    this.ctx.fillRect(x, y, barWidth - 1, barHeight);\n");
        html.push_str("                });\n");
        html.push_str("                \n");
        html.push_str("                // Draw axes\n");
        html.push_str("                this.ctx.strokeStyle = '#555';\n");
        html.push_str("                this.ctx.lineWidth = 1;\n");
        html.push_str("                this.ctx.beginPath();\n");
        html.push_str("                this.ctx.moveTo(this.margin.left, this.margin.top + height);\n");
        html.push_str("                this.ctx.lineTo(this.margin.left + width, this.margin.top + height);\n");
        html.push_str("                this.ctx.moveTo(this.margin.left, this.margin.top);\n");
        html.push_str("                this.ctx.lineTo(this.margin.left, this.margin.top + height);\n");
        html.push_str("                this.ctx.stroke();\n");
        html.push_str("                \n");
        html.push_str("                // Draw labels\n");
        html.push_str("                this.ctx.fillStyle = '#999';\n");
        html.push_str("                this.ctx.font = '11px -apple-system, sans-serif';\n");
        html.push_str("                this.ctx.textAlign = 'center';\n");
        html.push_str("                this.ctx.fillText(this.label, this.margin.left + width / 2, this.margin.top + height + 20);\n");
        html.push_str("                \n");
        html.push_str("                // Draw selection rectangle\n");
        html.push_str("                if (this.selection) {\n");
        html.push_str("                    this.ctx.strokeStyle = '#4a9eff';\n");
        html.push_str("                    this.ctx.lineWidth = 2;\n");
        html.push_str("                    this.ctx.setLineDash([5, 5]);\n");
        html.push_str("                    this.ctx.strokeRect(\n");
        html.push_str("                        this.selection.startX,\n");
        html.push_str("                        this.selection.startY,\n");
        html.push_str("                        this.selection.endX - this.selection.startX,\n");
        html.push_str("                        this.selection.endY - this.selection.startY\n");
        html.push_str("                    );\n");
        html.push_str("                    this.ctx.setLineDash([]);\n");
        html.push_str("                }\n");
        html.push_str("            }\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Category chart class - matches original\n");
        html.push_str("        class CategoryChart extends Chart {\n");
        html.push_str("            constructor(canvasId, data, label) {\n");
        html.push_str("                super(canvasId);\n");
        html.push_str("                this.data = data;\n");
        html.push_str("                this.label = label;\n");
        html.push_str("                this.margin = { top: 20, right: 10, bottom: 40, left: 60 };\n");
        html.push_str("                this.hoveredBar = -1;\n");
        html.push_str("                this.selectedCategories = new Set();\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            getFilterKey() {\n");
        html.push_str("                return this.label.toLowerCase();\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            draw() {\n");
        html.push_str("                this.clear();\n");
        html.push_str("                \n");
        html.push_str("                const width = this.width - this.margin.left - this.margin.right;\n");
        html.push_str("                const height = this.height - this.margin.top - this.margin.bottom;\n");
        html.push_str("                \n");
        html.push_str("                // Count categories\n");
        html.push_str("                const counts = {};\n");
        html.push_str("                this.data.forEach(value => {\n");
        html.push_str("                    counts[value] = (counts[value] || 0) + 1;\n");
        html.push_str("                });\n");
        html.push_str("                \n");
        html.push_str("                const categories = Object.keys(counts);\n");
        html.push_str("                const maxCount = Math.max(...Object.values(counts));\n");
        html.push_str("                const barWidth = width / categories.length * 0.8;\n");
        html.push_str("                const barSpacing = width / categories.length;\n");
        html.push_str("                \n");
        html.push_str("                // Draw bars\n");
        html.push_str("                categories.forEach((category, i) => {\n");
        html.push_str("                    const count = counts[category];\n");
        html.push_str("                    const barHeight = (count / maxCount) * height;\n");
        html.push_str("                    const x = this.margin.left + i * barSpacing + (barSpacing - barWidth) / 2;\n");
        html.push_str("                    const y = this.margin.top + height - barHeight;\n");
        html.push_str("                    \n");
        html.push_str("                    // Highlight selected categories\n");
        html.push_str("                    if (this.selectedCategories.has(category)) {\n");
        html.push_str("                        this.ctx.fillStyle = '#4a9eff';\n");
        html.push_str("                    } else {\n");
        html.push_str("                        this.ctx.fillStyle = '#ff6b6b';\n");
        html.push_str("                    }\n");
        html.push_str("                    this.ctx.fillRect(x, y, barWidth, barHeight);\n");
        html.push_str("                    \n");
        html.push_str("                    // Draw category label\n");
        html.push_str("                    this.ctx.fillStyle = '#999';\n");
        html.push_str("                    this.ctx.font = '10px -apple-system, sans-serif';\n");
        html.push_str("                    this.ctx.textAlign = 'center';\n");
        html.push_str("                    this.ctx.fillText(category, x + barWidth / 2, this.margin.top + height + 15);\n");
        html.push_str("                });\n");
        html.push_str("                \n");
        html.push_str("                // Draw axes\n");
        html.push_str("                this.ctx.strokeStyle = '#555';\n");
        html.push_str("                this.ctx.lineWidth = 1;\n");
        html.push_str("                this.ctx.beginPath();\n");
        html.push_str("                this.ctx.moveTo(this.margin.left, this.margin.top + height);\n");
        html.push_str("                this.ctx.lineTo(this.margin.left + width, this.margin.top + height);\n");
        html.push_str("                this.ctx.moveTo(this.margin.left, this.margin.top);\n");
        html.push_str("                this.ctx.lineTo(this.margin.left, this.margin.top + height);\n");
        html.push_str("                this.ctx.stroke();\n");
        html.push_str("                \n");
        html.push_str("                // Draw title\n");
        html.push_str("                this.ctx.fillStyle = '#e0e0e0';\n");
        html.push_str("                this.ctx.font = '12px -apple-system, sans-serif';\n");
        html.push_str("                this.ctx.textAlign = 'center';\n");
        html.push_str("                this.ctx.fillText(this.label, this.margin.left + width / 2, this.margin.top - 5);\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            onClick(e) {\n");
        html.push_str("                const rect = this.canvas.getBoundingClientRect();\n");
        html.push_str("                const x = e.clientX - rect.left;\n");
        html.push_str("                const y = e.clientY - rect.top;\n");
        html.push_str("                \n");
        html.push_str("                const width = this.width - this.margin.left - this.margin.right;\n");
        html.push_str("                \n");
        html.push_str("                // Count categories\n");
        html.push_str("                const counts = {};\n");
        html.push_str("                this.data.forEach(value => {\n");
        html.push_str("                    counts[value] = (counts[value] || 0) + 1;\n");
        html.push_str("                });\n");
        html.push_str("                \n");
        html.push_str("                const categories = Object.keys(counts);\n");
        html.push_str("                const barSpacing = width / categories.length;\n");
        html.push_str("                const barIndex = Math.floor((x - this.margin.left) / barSpacing);\n");
        html.push_str("                \n");
        html.push_str("                if (barIndex >= 0 && barIndex < categories.length) {\n");
        html.push_str("                    const category = categories[barIndex];\n");
        html.push_str("                    if (this.selectedCategories.has(category)) {\n");
        html.push_str("                        this.selectedCategories.delete(category);\n");
        html.push_str("                    } else {\n");
        html.push_str("                        this.selectedCategories.add(category);\n");
        html.push_str("                    }\n");
        html.push_str("                    \n");
        html.push_str("                    // Apply filter\n");
        html.push_str("                    filters[this.getFilterKey()] = this.selectedCategories;\n");
        html.push_str("                    applyFilters();\n");
        html.push_str("                }\n");
        html.push_str("            }\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Initialize all charts\n");
        html.push_str("        function initializeCharts() {\n");
        html.push_str("            if (!allData || !allData.columns) {\n");
        html.push_str("                console.error('No data available');\n");
        html.push_str("                return;\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            // Create charts for each column\n");
        html.push_str("            Object.keys(allData.columns).forEach(columnName => {\n");
        html.push_str("                const columnData = allData.columns[columnName];\n");
        html.push_str("                const canvasId = columnName.replace(/[ _]/g, '') + 'Canvas';\n");
        html.push_str("                \n");
        html.push_str("                if (!document.getElementById(canvasId)) {\n");
        html.push_str("                    console.error('Canvas not found:', canvasId);\n");
        html.push_str("                    return;\n");
        html.push_str("                }\n");
        html.push_str("                \n");
        html.push_str("                // Determine chart type based on data\n");
        html.push_str("                if (Array.isArray(columnData)) {\n");
        html.push_str("                    if (columnData.every(val => typeof val === 'number')) {\n");
        html.push_str("                        charts[columnName] = new Histogram(canvasId, columnData, columnName);\n");
        html.push_str("                    } else {\n");
        html.push_str("                        charts[columnName] = new CategoryChart(canvasId, columnData, columnName);\n");
        html.push_str("                    }\n");
        html.push_str("                } else if (typeof columnData === 'object') {\n");
        html.push_str("                    // Handle ColumnData enum structure\n");
        html.push_str("                    const dataType = Object.keys(columnData)[0];\n");
        html.push_str("                    const values = columnData[dataType];\n");
        html.push_str("                    if (dataType === 'Float' || dataType === 'Integer') {\n");
        html.push_str("                        charts[columnName] = new Histogram(canvasId, values, columnName);\n");
        html.push_str("                    } else {\n");
        html.push_str("                        charts[columnName] = new CategoryChart(canvasId, values, columnName);\n");
        html.push_str("                    }\n");
        html.push_str("                }\n");
        html.push_str("            });\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Create interactive chart with mouse events\n");
        html.push_str("        function createInteractiveChart(canvas, ctx, data, columnName, width, height) {\n");
        html.push_str("            // Clear canvas\n");
        html.push_str("            ctx.clearRect(0, 0, width, height);\n");
        html.push_str("            \n");
        html.push_str("            if (data.length === 0) {\n");
        html.push_str("                ctx.fillStyle = '#666';\n");
        html.push_str("                ctx.font = '16px sans-serif';\n");
        html.push_str("                ctx.textAlign = 'center';\n");
        html.push_str("                ctx.fillText('No data available', width / 2, height / 2);\n");
        html.push_str("                return;\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            // Try to determine if data is numeric\n");
        html.push_str("            const numericData = data.map(d => parseFloat(d)).filter(d => !isNaN(d));\n");
        html.push_str("            \n");
        html.push_str("            if (numericData.length > data.length * 0.8) {\n");
        html.push_str("                // Numeric data - create interactive histogram\n");
        html.push_str("                createInteractiveHistogram(canvas, ctx, numericData, columnName, width, height);\n");
        html.push_str("            } else {\n");
        html.push_str("                // Categorical data - create interactive bar chart\n");
        html.push_str("                createInteractiveCategoryChart(canvas, ctx, data, columnName, width, height);\n");
        html.push_str("            }\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Create interactive histogram with tooltips\n");
        html.push_str("        function createInteractiveHistogram(canvas, ctx, data, columnName, width, height) {\n");
        html.push_str("            const min = Math.min(...data);\n");
        html.push_str("            const max = Math.max(...data);\n");
        html.push_str("            const bins = 20;\n");
        html.push_str("            const binWidth = (max - min) / bins;\n");
        html.push_str("            \n");
        html.push_str("            // Create bins\n");
        html.push_str("            const histogram = new Array(bins).fill(0);\n");
        html.push_str("            data.forEach(value => {\n");
        html.push_str("                const binIndex = Math.min(Math.floor((value - min) / binWidth), bins - 1);\n");
        html.push_str("                histogram[binIndex]++;\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            const maxCount = Math.max(...histogram);\n");
        html.push_str("            \n");
        html.push_str("            // Store chart data for interaction\n");
        html.push_str("            canvas.chartData = {\n");
        html.push_str("                type: 'histogram',\n");
        html.push_str("                bins: histogram,\n");
        html.push_str("                min: min,\n");
        html.push_str("                max: max,\n");
        html.push_str("                binWidth: binWidth,\n");
        html.push_str("                maxCount: maxCount,\n");
        html.push_str("                columnName: columnName\n");
        html.push_str("            };\n");
        html.push_str("            \n");
        html.push_str("            // Draw histogram\n");
        html.push_str("            ctx.fillStyle = '#4a9eff';\n");
        html.push_str("            histogram.forEach((count, i) => {\n");
        html.push_str("                const barHeight = (count / maxCount) * (height - 40);\n");
        html.push_str("                const x = (i / bins) * width;\n");
        html.push_str("                const y = height - barHeight - 20;\n");
        html.push_str("                ctx.fillRect(x, y, width / bins - 1, barHeight);\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            // Draw axes\n");
        html.push_str("            ctx.strokeStyle = '#666';\n");
        html.push_str("            ctx.lineWidth = 1;\n");
        html.push_str("            ctx.beginPath();\n");
        html.push_str("            ctx.moveTo(0, height - 20);\n");
        html.push_str("            ctx.lineTo(width, height - 20);\n");
        html.push_str("            ctx.stroke();\n");
        html.push_str("            \n");
        html.push_str("            ctx.beginPath();\n");
        html.push_str("            ctx.moveTo(0, 0);\n");
        html.push_str("            ctx.lineTo(0, height - 20);\n");
        html.push_str("            ctx.stroke();\n");
        html.push_str("            \n");
        html.push_str("            // Add mouse event listeners\n");
        html.push_str("            canvas.addEventListener('mousemove', (e) => {\n");
        html.push_str("                const rect = canvas.getBoundingClientRect();\n");
        html.push_str("                const x = e.clientX - rect.left;\n");
        html.push_str("                const y = e.clientY - rect.top;\n");
        html.push_str("                \n");
        html.push_str("                const binIndex = Math.floor((x / width) * bins);\n");
        html.push_str("                if (binIndex >= 0 && binIndex < bins && histogram[binIndex] > 0) {\n");
        html.push_str("                    const start = min + binIndex * binWidth;\n");
        html.push_str("                    const end = min + (binIndex + 1) * binWidth;\n");
        html.push_str("                    const count = histogram[binIndex];\n");
        html.push_str("                    \n");
        html.push_str("                    const tooltip = document.getElementById('tooltip');\n");
        html.push_str("                    tooltip.style.display = 'block';\n");
        html.push_str("                    tooltip.style.left = e.pageX + 10 + 'px';\n");
        html.push_str("                    tooltip.style.top = e.pageY - 30 + 'px';\n");
        html.push_str("                    tooltip.innerHTML = `${start.toFixed(2)} - ${end.toFixed(2)}<br>Count: ${count}`;\n");
        html.push_str("                } else {\n");
        html.push_str("                    document.getElementById('tooltip').style.display = 'none';\n");
        html.push_str("                }\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            canvas.addEventListener('mouseleave', () => {\n");
        html.push_str("                document.getElementById('tooltip').style.display = 'none';\n");
        html.push_str("            });\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Create interactive category chart with tooltips\n");
        html.push_str("        function createInteractiveCategoryChart(canvas, ctx, data, columnName, width, height) {\n");
        html.push_str("            // Count categories\n");
        html.push_str("            const categories = {};\n");
        html.push_str("            data.forEach(value => {\n");
        html.push_str("                categories[value] = (categories[value] || 0) + 1;\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            const categoryNames = Object.keys(categories);\n");
        html.push_str("            const counts = Object.values(categories);\n");
        html.push_str("            const maxCount = Math.max(...counts);\n");
        html.push_str("            \n");
        html.push_str("            // Store chart data for interaction\n");
        html.push_str("            canvas.chartData = {\n");
        html.push_str("                type: 'category',\n");
        html.push_str("                categories: categoryNames,\n");
        html.push_str("                counts: counts,\n");
        html.push_str("                maxCount: maxCount,\n");
        html.push_str("                columnName: columnName\n");
        html.push_str("            };\n");
        html.push_str("            \n");
        html.push_str("            // Draw bars\n");
        html.push_str("            ctx.fillStyle = '#ff6b6b';\n");
        html.push_str("            const barWidth = width / categoryNames.length;\n");
        html.push_str("            categoryNames.forEach((category, i) => {\n");
        html.push_str("                const barHeight = (counts[i] / maxCount) * (height - 40);\n");
        html.push_str("                const x = i * barWidth;\n");
        html.push_str("                const y = height - barHeight - 20;\n");
        html.push_str("                ctx.fillRect(x, y, barWidth - 2, barHeight);\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            // Draw axes\n");
        html.push_str("            ctx.strokeStyle = '#666';\n");
        html.push_str("            ctx.lineWidth = 1;\n");
        html.push_str("            ctx.beginPath();\n");
        html.push_str("            ctx.moveTo(0, height - 20);\n");
        html.push_str("            ctx.lineTo(width, height - 20);\n");
        html.push_str("            ctx.stroke();\n");
        html.push_str("            \n");
        html.push_str("            ctx.beginPath();\n");
        html.push_str("            ctx.moveTo(0, 0);\n");
        html.push_str("            ctx.lineTo(0, height - 20);\n");
        html.push_str("            ctx.stroke();\n");
        html.push_str("            \n");
        html.push_str("            // Add mouse event listeners\n");
        html.push_str("            canvas.addEventListener('mousemove', (e) => {\n");
        html.push_str("                const rect = canvas.getBoundingClientRect();\n");
        html.push_str("                const x = e.clientX - rect.left;\n");
        html.push_str("                const y = e.clientY - rect.top;\n");
        html.push_str("                \n");
        html.push_str("                const barIndex = Math.floor((x / width) * categoryNames.length);\n");
        html.push_str("                if (barIndex >= 0 && barIndex < categoryNames.length) {\n");
        html.push_str("                    const category = categoryNames[barIndex];\n");
        html.push_str("                    const count = counts[barIndex];\n");
        html.push_str("                    const percentage = ((count / data.length) * 100).toFixed(1);\n");
        html.push_str("                    \n");
        html.push_str("                    const tooltip = document.getElementById('tooltip');\n");
        html.push_str("                    tooltip.style.display = 'block';\n");
        html.push_str("                    tooltip.style.left = e.pageX + 10 + 'px';\n");
        html.push_str("                    tooltip.style.top = e.pageY - 30 + 'px';\n");
        html.push_str("                    tooltip.innerHTML = `<strong>${category}</strong><br>Count: ${count}<br>${percentage}%`;\n");
        html.push_str("                } else {\n");
        html.push_str("                    document.getElementById('tooltip').style.display = 'none';\n");
        html.push_str("                }\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            canvas.addEventListener('mouseleave', () => {\n");
        html.push_str("                document.getElementById('tooltip').style.display = 'none';\n");
        html.push_str("            });\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Create chart based on data type\n");
        html.push_str("        function createChart(ctx, data, columnName, width, height) {\n");
        html.push_str("            // Clear canvas\n");
        html.push_str("            ctx.clearRect(0, 0, width, height);\n");
        html.push_str("            \n");
        html.push_str("            if (data.length === 0) {\n");
        html.push_str("                ctx.fillStyle = '#666';\n");
        html.push_str("                ctx.font = '16px sans-serif';\n");
        html.push_str("                ctx.textAlign = 'center';\n");
        html.push_str("                ctx.fillText('No data available', width / 2, height / 2);\n");
        html.push_str("                return;\n");
        html.push_str("            }\n");
        html.push_str("            \n");
        html.push_str("            // Try to determine if data is numeric\n");
        html.push_str("            const numericData = data.map(d => parseFloat(d)).filter(d => !isNaN(d));\n");
        html.push_str("            \n");
        html.push_str("            if (numericData.length > data.length * 0.8) {\n");
        html.push_str("                // Numeric data - create histogram\n");
        html.push_str("                createHistogram(ctx, numericData, columnName, width, height);\n");
        html.push_str("            } else {\n");
        html.push_str("                // Categorical data - create bar chart\n");
        html.push_str("                createCategoryChart(ctx, data, columnName, width, height);\n");
        html.push_str("            }\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Create histogram\n");
        html.push_str("        function createHistogram(ctx, data, columnName, width, height) {\n");
        html.push_str("            const min = Math.min(...data);\n");
        html.push_str("            const max = Math.max(...data);\n");
        html.push_str("            const bins = 20;\n");
        html.push_str("            const binWidth = (max - min) / bins;\n");
        html.push_str("            \n");
        html.push_str("            // Create bins\n");
        html.push_str("            const histogram = new Array(bins).fill(0);\n");
        html.push_str("            data.forEach(value => {\n");
        html.push_str("                const binIndex = Math.min(Math.floor((value - min) / binWidth), bins - 1);\n");
        html.push_str("                histogram[binIndex]++;\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            const maxCount = Math.max(...histogram);\n");
        html.push_str("            \n");
        html.push_str("            // Draw histogram\n");
        html.push_str("            ctx.fillStyle = '#4a9eff';\n");
        html.push_str("            histogram.forEach((count, i) => {\n");
        html.push_str("                const barHeight = (count / maxCount) * (height - 40);\n");
        html.push_str("                const x = (i / bins) * width;\n");
        html.push_str("                const y = height - barHeight - 20;\n");
        html.push_str("                ctx.fillRect(x, y, width / bins - 1, barHeight);\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            // Draw axes\n");
        html.push_str("            ctx.strokeStyle = '#666';\n");
        html.push_str("            ctx.lineWidth = 1;\n");
        html.push_str("            ctx.beginPath();\n");
        html.push_str("            ctx.moveTo(0, height - 20);\n");
        html.push_str("            ctx.lineTo(width, height - 20);\n");
        html.push_str("            ctx.stroke();\n");
        html.push_str("            \n");
        html.push_str("            ctx.beginPath();\n");
        html.push_str("            ctx.moveTo(0, 0);\n");
        html.push_str("            ctx.lineTo(0, height - 20);\n");
        html.push_str("            ctx.stroke();\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Create category chart\n");
        html.push_str("        function createCategoryChart(ctx, data, columnName, width, height) {\n");
        html.push_str("            // Count categories\n");
        html.push_str("            const categories = {};\n");
        html.push_str("            data.forEach(value => {\n");
        html.push_str("                categories[value] = (categories[value] || 0) + 1;\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            const categoryNames = Object.keys(categories);\n");
        html.push_str("            const maxCount = Math.max(...Object.values(categories));\n");
        html.push_str("            \n");
        html.push_str("            // Draw bars\n");
        html.push_str("            const barWidth = width / categoryNames.length;\n");
        html.push_str("            const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3'];\n");
        html.push_str("            \n");
        html.push_str("            categoryNames.forEach((category, i) => {\n");
        html.push_str("                const count = categories[category];\n");
        html.push_str("                const barHeight = (count / maxCount) * (height - 40);\n");
        html.push_str("                const x = i * barWidth;\n");
        html.push_str("                const y = height - barHeight - 20;\n");
        html.push_str("                \n");
        html.push_str("                ctx.fillStyle = colors[i % colors.length];\n");
        html.push_str("                ctx.fillRect(x, y, barWidth - 2, barHeight);\n");
        html.push_str("                \n");
        html.push_str("                // Draw label\n");
        html.push_str("                ctx.fillStyle = '#e0e0e0';\n");
        html.push_str("                ctx.font = '10px sans-serif';\n");
        html.push_str("                ctx.textAlign = 'center';\n");
        html.push_str("                ctx.fillText(category, x + barWidth / 2, height - 5);\n");
        html.push_str("            });\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Apply filters to all charts\n");
        html.push_str("        function applyFilters() {\n");
        html.push_str("            // Clear all filtered indices\n");
        html.push_str("            filteredIndices.fill(1);\n");
        html.push_str("            \n");
        html.push_str("            // Apply each filter\n");
        html.push_str("            Object.keys(filters).forEach(filterKey => {\n");
        html.push_str("                const filter = filters[filterKey];\n");
        html.push_str("                if (filter) {\n");
        html.push_str("                    if (Array.isArray(filter)) {\n");
        html.push_str("                        // Range filter\n");
        html.push_str("                        const [min, max] = filter;\n");
        html.push_str("                        if (allData && allData.columns && allData.columns[filterKey]) {\n");
        html.push_str("                            const data = allData.columns[filterKey];\n");
        html.push_str("                            data.forEach((value, index) => {\n");
        html.push_str("                                if (value < min || value > max) {\n");
        html.push_str("                                    filteredIndices[index] = 0;\n");
        html.push_str("                                }\n");
        html.push_str("                            });\n");
        html.push_str("                        }\n");
        html.push_str("                    } else if (filter instanceof Set) {\n");
        html.push_str("                        // Category filter\n");
        html.push_str("                        if (allData && allData.columns && allData.columns[filterKey]) {\n");
        html.push_str("                            const data = allData.columns[filterKey];\n");
        html.push_str("                            data.forEach((value, index) => {\n");
        html.push_str("                                if (!filter.has(value)) {\n");
        html.push_str("                                    filteredIndices[index] = 0;\n");
        html.push_str("                                }\n");
        html.push_str("                            });\n");
        html.push_str("                        }\n");
        html.push_str("                    }\n");
        html.push_str("                }\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            // Redraw all charts\n");
        html.push_str("            Object.values(charts).forEach(chart => {\n");
        html.push_str("                if (chart && chart.draw) {\n");
        html.push_str("                    chart.draw();\n");
        html.push_str("                }\n");
        html.push_str("            });\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Reset all charts\n");
        html.push_str("        function resetAll() {\n");
        html.push_str("            // Clear all filters\n");
        html.push_str("            Object.keys(filters).forEach(key => {\n");
        html.push_str("                if (filters[key] instanceof Set) {\n");
        html.push_str("                    filters[key].clear();\n");
        html.push_str("                } else {\n");
        html.push_str("                    filters[key] = null;\n");
        html.push_str("                }\n");
        html.push_str("            });\n");
        html.push_str("            \n");
        html.push_str("            // Reset filtered indices\n");
        html.push_str("            filteredIndices.fill(1);\n");
        html.push_str("            \n");
        html.push_str("            // Redraw all charts\n");
        html.push_str("            Object.values(charts).forEach(chart => {\n");
        html.push_str("                if (chart.selectedCategories) {\n");
        html.push_str("                    chart.selectedCategories.clear();\n");
        html.push_str("                }\n");
        html.push_str("                if (chart && chart.draw) {\n");
        html.push_str("                    chart.draw();\n");
        html.push_str("                }\n");
        html.push_str("            });\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Export data\n");
        html.push_str("        function exportData() {\n");
        html.push_str("            if (!allData) return;\n");
        html.push_str("            \n");
        html.push_str("            const dataStr = JSON.stringify(allData, null, 2);\n");
        html.push_str("            const dataBlob = new Blob([dataStr], {type: 'application/json'});\n");
        html.push_str("            const url = URL.createObjectURL(dataBlob);\n");
        html.push_str("            const link = document.createElement('a');\n");
        html.push_str("            link.href = url;\n");
        html.push_str("            link.download = 'data_export.json';\n");
        html.push_str("            link.click();\n");
        html.push_str("            URL.revokeObjectURL(url);\n");
        html.push_str("        }\n");
        html.push_str("        \n");
        html.push_str("        // Start loading\n");
        html.push_str("        initializeData();\n");
        html.push_str("    </script>\n");
        html.push_str("</body>\n");
        html.push_str("</html>\n");
        
        Ok(html)
    }
}